#include <iostream>
#include <queue>
#include <vector>
using namespace std;

#define IOS                  \
    ios::sync_with_stdio(0); \
    cin.tie(0);              \
    cout.tie(0);
#define endl "\n"
#define ll long long

class disjointSet{
    public:
    vector<int> parent,size;
    disjointSet(int n){
        parent.resize(n);
        size.resize(n);
        for(int i=0; i<n; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findUParent(int u){
        if(parent[u]==u){
            return u;
        }
        return parent[u] = findUParent(parent[u]);
    }
    void Union(int u, int v){
        int p1 = findUParent(u);
        int p2 = findUParent(v);
        if(p1==p2){
            return ;
        }
        if(size[p1] > size[p2]){
            parent[p1] = p2;
            size[p2] += size[p1];
        }
        else{
            parent[p2] = p1;
            size[p1] += size[p2];
        }
    }
};

void solve(){
    ll n,m1,m2;cin>>n>>m1>>m2;
    disjointSet ds1(n+1);
    disjointSet ds2(n+1);
    for(int i=0; i<m1; i++){
        int u,v;cin>>u>>v;
        ds1.Union(u,v);
    }
    for (int i = 0; i < m2; i++){
        int u,v;cin>>u>>v;
        ds2.Union(u,v);
    }
    vector<vector<int>> edges;
    int cnt = 0;
    for(int i=1; i<=n; i++){
        for (int j = 1; j <= n; j++){
            if(ds1.findUParent(i)!=ds1.findUParent(j) && ds2.findUParent(i)!=ds2.findUParent(j)){
                edges.push_back({i,j});
                ds1.Union(i,j);
                ds2.Union(i,j);
                cnt++;
            }
            
        }
        
    }
    
    cout<<cnt<<endl;
    for(auto it: edges){
        cout<<it[0]<<" "<<it[1]<<endl;
    }



    
    
}

int32_t main(){
    IOS;
    ll t;
    // cin>>t;
    // while(t--){     
        solve();
    // }

    return 0;
}
