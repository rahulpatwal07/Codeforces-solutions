#include <bits/stdc++.h>
using namespace std;

#define IOS                  \
    ios::sync_with_stdio(0); \
    cin.tie(0);              \
    cout.tie(0);
#define endl "\n"
#define ll long long

class disjointSet{
    public:
    vector<int> parent,size;
    disjointSet(int n){
        parent.resize(n);
        size.resize(n);
        for(int i=0; i<n; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findUParent(int u){
        if(parent[u]==u){
            return u;
        }
        return parent[u] = findUParent(parent[u]);
    }
    void Union(int u, int v){
        int p1 = findUParent(u);
        int p2 = findUParent(v);
        if(p1==p2){
            return ;
        }
        if(size[p1] > size[p2]){
            parent[p1] = p2;
            size[p2] += size[p1];
        }
        else{
            parent[p2] = p1;
            size[p1] += size[p2];
        }
    }
};
void solve(){
    ll n,m;cin>>n>>m;
    ll cnt = 0;
    disjointSet ds(m);
    vector<int> vis(m,0);

    for (ll i = 0; i < n; i++){
        int k;cin>>k;
        if(k==0){
            cnt++;
        }
        else{
            int last = -1;
            for (int j = 0; j < k; j++){
                int a;cin>>a;
                if(last!=-1){
                    ds.Union(last,a-1);
                }
                last = a-1;
                vis[a-1] = 1;
            }
            
        }
    }
    if(cnt==n){
        cout<<n<<endl;
        return ;
    }
    for(int i=0; i<m; i++){
        if(ds.parent[i]==i && vis[i]==1){
            cnt++;
        }
    }
    cout<<cnt-1<<endl;  
}

int32_t main(){
    IOS;
    // ll t;
    // cin>>t;
    // while(t--){
        solve();
    // }

    return 0;
}
