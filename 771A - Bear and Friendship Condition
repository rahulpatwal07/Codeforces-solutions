#include <bits/stdc++.h>
using namespace std;

#define IOS                  \
    ios::sync_with_stdio(0); \
    cin.tie(0);              \
    cout.tie(0);
#define ll long long

class disjointSet{
    public:
    vector<int> parent,size;
    disjointSet(int n){
        parent.resize(n);
        size.resize(n);
        for(int i=0; i<n; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findUParent(int u){
        if(parent[u]==u){
            return u;
        }
        return parent[u] = findUParent(parent[u]);
    }
    void Union(int u, int v){
        int p1 = findUParent(u);
        int p2 = findUParent(v);
        if(p1==p2){
            return ;
        }
        if(size[p1] > size[p2]){
            parent[p1] = p2;
            size[p2] += size[p1];
        }
        else{
            parent[p2] = p1;
            size[p1] += size[p2];
        }
    }
};

void solve(){
    int n,m;cin>>n>>m;
    vector<vector<int>> adj(n+1);
    disjointSet ds(n+1);
    for(int i=0; i<m; i++){
        int u,v;cin>>u>>v;
        ds.Union(u,v);
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(int i=1; i<=n; i++){
        ds.Union(ds.parent[i],i);
    }
    for(int i=1; i<=n; i++){
        int p = ds.parent[i];
        if(ds.size[p] != adj[i].size()+1){
            cout<<"NO\n";
            return ;
        }
    }
    cout<<"YES\n";

}

int32_t main(){
    IOS;
    // ll t;
    // cin>>t;
    // while(t--){
    solve();
    // }
    return 0;
}
