#include <iostream>
#include <algorithm>
#include<vector>
using namespace std;
#define ll long long

int dr[4] = {1,-1,0,0};
int dc[4] = {0,0,-1,1};
void dfs(vector<vector<char>>& v, int n,int m,int i, int j,char ch,vector<vector<int>>&vis){
    if(v[i][j]=='.'){
        v[i][j] = ch;
    }
    vis[i][j] = 1;
    char ch1 = ch=='B' ? 'W' : 'B';
    for (int k = 0; k < 4; k++)
    {
        int nx = i + dr[k];
        int ny = j + dc[k];
        if(nx>=0 && nx<n && ny>=0 && ny<m && !vis[nx][ny]){
            dfs(v,n,m,nx,ny,ch1,vis);
        }
    }
    
}
void solve(){
    ll n,m;cin>>n>>m;
    vector<vector<char>> v(n,vector<char> (m));
    vector<vector<int>> vis(n,vector<int> (m,0));
    for (int i = 0; i < n; i++){
        string s;cin>>s;
        for (int j = 0; j < m; j++){
            v[i][j] = s[j];
        }
        
    }
    dfs(v,n,m,0,0,'B',vis);
    for (int i = 0; i < n; i++){
        for (int j = 0; j < m; j++)
        {
            cout<<v[i][j];
        }cout<<endl;
    }
}
int main(){
        solve();
    return 0;
}
